@model ShippingInformation
@{
    var Account = ViewData["Account"] as Account;
    var Order = ViewData["Order"] as Order;
    var ListOrderDetail = ViewData["ListOrderDetail"] as List<OrderDetail>;
    var ListDiscount = ViewData["ListDiscount"] as List<Discount>;
    var ListDelivery = ViewData["ListDelivery"] as List<Delivery>;
}
<link href="~/css/Checkout.css" rel="stylesheet" />

<body>
    <div class="container">
        <div class="main-title">
            <h1>List Product In Cart</h1>
        </div>
        <div class="content">
            <div class="cart">
                <h2>Products in Cart</h2>
                <div class="product-list">
                    @foreach (var orderdetail in ListOrderDetail)
                    {
                        <div class="product-item">
                            <img src="data:image/jpeg;base64, @Convert.ToBase64String(orderdetail.Product.Image)">
                            <div class="product-info">
                                <p>@orderdetail.Product.Name</p>
                                <p>Quantity: @orderdetail.Amount</p>
                                <p>Price: $@orderdetail.Subtotal</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="checkout">
                <h2>Checkout</h2>
                <form asp-controller="Order" asp-action="Checkout" method="post">
                    <label for="fullname">Full Name:</label>
                    <input type="text" id="fullname" asp-for="RecipientName" value="@Account.Profile.Name" required>

                    <label for="phone">Phone:</label>
                    <input type="text" id="phone" asp-for="Phone" value="@Account.Profile.Phone" required>

                    <label for="address">Address:</label>
                    <input type="text" id="address" asp-for="Address" value="@Account.Profile.Address" required>

                    <label for="delivery">Delivery:</label>
                    <select id="delivery" name="deliveryId" required>
                        <option value="" style="font-size:1.5rem" data-price="0">--- Choose Delivery ---</option>
                        @foreach (var delivery in ListDelivery)
                        {
                            <option value="@delivery.Id" style="font-size:1.5rem" data-price="@delivery.Price">@delivery.Type - $@delivery.Price (Time: @delivery.Day Day)</option>
                        }
                    </select>

                    <label for="discount">Discount:</label>
                    <select id="discount" name="discountId">
                        <option value="" style="font-size:1.5rem" data-percent="0">--- Choose Discount (Optional) ---</option>
                        @foreach (var discount in ListDiscount)
                        {
                            <option value="@discount?.Id" style="font-size:1.5rem" data-percent="@discount?.Percent">@discount?.Name - @discount?.Percent % (Remain: @discount?.Quantity)</option>
                        }
                    </select>


                    <div class="totals">
                        <p>Total Quantity: @Order?.Quantity</p>
                        <p>Total Price: $<span id="total-price">@Order?.Total</span></p>
                    </div>

                    <button class="button-checkout" type="submit">Check Out</button>
                </form>
            </div>
        </div>
    </div>
</body>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var deliverySelect = document.getElementById('delivery');
        var discountSelect = document.getElementById('discount');
        var totalPriceElement = document.getElementById('total-price');
        var baseOrderTotal = parseFloat(totalPriceElement.textContent.replace('$', ''));

        function updateTotalPrice() {
            var selectedDeliveryOption = deliverySelect.options[deliverySelect.selectedIndex];
            var selectedDiscountOption = discountSelect.options[discountSelect.selectedIndex];

            var deliveryPrice = parseFloat(selectedDeliveryOption.getAttribute('data-price')) || 0;
            var discountPercent = parseFloat(selectedDiscountOption.getAttribute('data-percent')) || 0;

            var discountedPrice = baseOrderTotal * (1 - discountPercent / 100);
            var totalPrice = discountedPrice + deliveryPrice;

            totalPriceElement.textContent = totalPrice.toFixed(2);
        }

        deliverySelect.addEventListener('change', updateTotalPrice);
        discountSelect.addEventListener('change', updateTotalPrice);

        // Initial call to set the total price based on default selections
        updateTotalPrice();
    });
</script>